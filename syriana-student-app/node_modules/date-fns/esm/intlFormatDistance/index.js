import { secondsInDay, secondsInHour, secondsInMinute, secondsInMonth, secondsInQuarter, secondsInWeek, secondsInYear } from "../constants/index.js";
import differenceInCalendarDays from "../differenceInCalendarDays/index.js";
import differenceInCalendarMonths from "../differenceInCalendarMonths/index.js";
import differenceInCalendarQuarters from "../differenceInCalendarQuarters/index.js";
import differenceInCalendarWeeks from "../differenceInCalendarWeeks/index.js";
import differenceInCalendarYears from "../differenceInCalendarYears/index.js";
import differenceInHours from "../differenceInHours/index.js";
import differenceInMinutes from "../differenceInMinutes/index.js";
import differenceInSeconds from "../differenceInSeconds/index.js";
import toDate from "../toDate/index.js";
import requiredArgs from "../_lib/requiredArgs/index.js";

export default function intlFormatDistance(date, baseDate, options) {
  requiredArgs(2, arguments);
  var value = 0;
  var unit;
  var dateLeft = toDate(date);
  var dateRight = toDate(baseDate);
  if (!(options !== null && options !== void 0 && options.unit)) {
    // Get the unit based on diffInSeconds calculations if no unit is specified
    var diffInSeconds = differenceInSeconds(dateLeft, dateRight); // The smallest unit

    if (Math.abs(diffInSeconds) < secondsInMinute) {
      value = differenceInSeconds(dateLeft, dateRight);
      unit = 'second';
    } else if (Math.abs(diffInSeconds) < secondsInHour) {
      value = differenceInMinutes(dateLeft, dateRight);
      unit = 'minute';
    } else if (Math.abs(diffInSeconds) < secondsInDay && Math.abs(differenceInCalendarDays(dateLeft, dateRight)) < 1) {
      value = differenceInHours(dateLeft, dateRight);
      unit = 'hour';
    } else if (Math.abs(diffInSeconds) < secondsInWeek && (value = differenceInCalendarDays(dateLeft, dateRight)) && Math.abs(value) < 7) {
      unit = 'day';
    } else if (Math.abs(diffInSeconds) < secondsInMonth) {
      value = differenceInCalendarWeeks(dateLeft, dateRight);
      unit = 'week';
    } else if (Math.abs(diffInSeconds) < secondsInQuarter) {
      value = differenceInCalendarMonths(dateLeft, dateRight);
      unit = 'month';
    } else if (Math.abs(diffInSeconds) < secondsInYear) {
      if (differenceInCalendarQuarters(dateLeft, dateRight) < 4) {
        // To filter out cases that are less than a year but match 4 quarters
        value = differenceInCalendarQuarters(dateLeft, dateRight);
        unit = 'quarter';
      } else {
        value = differenceInCalendarYears(dateLeft, dateRight);
        unit = 'year';
      }
    } else {
      value = differenceInCalendarYears(dateLeft, dateRight);
      unit = 'year';
    }
  } else {
    // Get the value if unit is specified
    unit = options === null || options === void 0 ? void 0 : options.unit;
    if (unit === 'second') {
      value = differenceInSeconds(dateLeft, dateRight);
    } else if (unit === 'minute') {
      value = differenceInMinutes(dateLeft, dateRight);
    } else if (unit === 'hour') {
      value = differenceInHours(dateLeft, dateRight);
    } else if (unit === 'day') {
      value = differenceInCalendarDays(dateLeft, dateRight);
    } else if (unit === 'week') {
      value = differenceInCalendarWeeks(dateLeft, dateRight);
    } else if (unit === 'month') {
      value = differenceInCalendarMonths(dateLeft, dateRight);
    } else if (unit === 'quarter') {
      value = differenceInCalendarQuarters(dateLeft, dateRight);
    } else if (unit === 'year') {
      value = differenceInCalendarYears(dateLeft, dateRight);
    }
  }
  var rtf = new Intl.RelativeTimeFormat(options === null || options === void 0 ? void 0 : options.locale, {
    localeMatcher: options === null || options === void 0 ? void 0 : options.localeMatcher,
    numeric: (options === null || options === void 0 ? void 0 : options.numeric) || 'auto',
    style: options === null || options === void 0 ? void 0 : options.style
  });
  return rtf.format(value, unit);
}
